// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockmarket.proto

#ifndef PROTOBUF_stockmarket_2eproto__INCLUDED
#define PROTOBUF_stockmarket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace StockMarket {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_stockmarket_2eproto();
void protobuf_AssignDesc_stockmarket_2eproto();
void protobuf_ShutdownFile_stockmarket_2eproto();

class StockQuote;
class StockQuoteResponse;
class StockQuoteRequest;
class StockRPCRequest;
class StockRPCResponse;
class StockRPCAddRequest;
class StockRPCAddResponse;
class StockRPCReverseRequest;
class StockRPCReverseResponse;
class StockWorkerRequest;
class StockWorkerResponse;

enum RPCError {
  NO_SERVICE = 1,
  NO_METHOD = 2,
  BAD_REQUEST = 3
};
bool RPCError_IsValid(int value);
const RPCError RPCError_MIN = NO_SERVICE;
const RPCError RPCError_MAX = BAD_REQUEST;
const int RPCError_ARRAYSIZE = RPCError_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPCError_descriptor();
inline const ::std::string& RPCError_Name(RPCError value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPCError_descriptor(), value);
}
inline bool RPCError_Parse(
    const ::std::string& name, RPCError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCError>(
    RPCError_descriptor(), name, value);
}
// ===================================================================

class StockQuote : public ::google::protobuf::Message {
 public:
  StockQuote();
  virtual ~StockQuote();

  StockQuote(const StockQuote& from);

  inline StockQuote& operator=(const StockQuote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQuote& default_instance();

  void Swap(StockQuote* other);

  // implements Message ----------------------------------------------

  inline StockQuote* New() const { return New(NULL); }

  StockQuote* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockQuote& from);
  void MergeFrom(const StockQuote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockQuote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // required string symbol = 2;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // required double timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  double timestamp() const;
  void set_timestamp(double value);

  // required double open = 4;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 4;
  double open() const;
  void set_open(double value);

  // required double high = 5;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 5;
  double high() const;
  void set_high(double value);

  // required double low = 6;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 6;
  double low() const;
  void set_low(double value);

  // required double close = 7;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 7;
  double close() const;
  void set_close(double value);

  // required int64 volume = 8;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required double adjustedClose = 9;
  bool has_adjustedclose() const;
  void clear_adjustedclose();
  static const int kAdjustedCloseFieldNumber = 9;
  double adjustedclose() const;
  void set_adjustedclose(double value);

  // @@protoc_insertion_point(class_scope:StockMarket.StockQuote)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_adjustedclose();
  inline void clear_has_adjustedclose();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  double timestamp_;
  double open_;
  double high_;
  double low_;
  double close_;
  ::google::protobuf::int64 volume_;
  double adjustedclose_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockQuote* default_instance_;
};
// -------------------------------------------------------------------

class StockQuoteResponse : public ::google::protobuf::Message {
 public:
  StockQuoteResponse();
  virtual ~StockQuoteResponse();

  StockQuoteResponse(const StockQuoteResponse& from);

  inline StockQuoteResponse& operator=(const StockQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQuoteResponse& default_instance();

  void Swap(StockQuoteResponse* other);

  // implements Message ----------------------------------------------

  inline StockQuoteResponse* New() const { return New(NULL); }

  StockQuoteResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockQuoteResponse& from);
  void MergeFrom(const StockQuoteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockQuoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StockMarket.StockQuote result = 1;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::StockMarket::StockQuote& result(int index) const;
  ::StockMarket::StockQuote* mutable_result(int index);
  ::StockMarket::StockQuote* add_result();
  const ::google::protobuf::RepeatedPtrField< ::StockMarket::StockQuote >&
      result() const;
  ::google::protobuf::RepeatedPtrField< ::StockMarket::StockQuote >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:StockMarket.StockQuoteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::StockMarket::StockQuote > result_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockQuoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class StockQuoteRequest : public ::google::protobuf::Message {
 public:
  StockQuoteRequest();
  virtual ~StockQuoteRequest();

  StockQuoteRequest(const StockQuoteRequest& from);

  inline StockQuoteRequest& operator=(const StockQuoteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockQuoteRequest& default_instance();

  void Swap(StockQuoteRequest* other);

  // implements Message ----------------------------------------------

  inline StockQuoteRequest* New() const { return New(NULL); }

  StockQuoteRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockQuoteRequest& from);
  void MergeFrom(const StockQuoteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockQuoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // required int64 start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // required int64 end = 3;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:StockMarket.StockQuoteRequest)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockQuoteRequest* default_instance_;
};
// -------------------------------------------------------------------

class StockRPCRequest : public ::google::protobuf::Message {
 public:
  StockRPCRequest();
  virtual ~StockRPCRequest();

  StockRPCRequest(const StockRPCRequest& from);

  inline StockRPCRequest& operator=(const StockRPCRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRPCRequest& default_instance();

  void Swap(StockRPCRequest* other);

  // implements Message ----------------------------------------------

  inline StockRPCRequest* New() const { return New(NULL); }

  StockRPCRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRPCRequest& from);
  void MergeFrom(const StockRPCRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockRPCRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string service = 1;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // required string method = 2;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // required bytes protobuf = 3;
  bool has_protobuf() const;
  void clear_protobuf();
  static const int kProtobufFieldNumber = 3;
  const ::std::string& protobuf() const;
  void set_protobuf(const ::std::string& value);
  void set_protobuf(const char* value);
  void set_protobuf(const void* value, size_t size);
  ::std::string* mutable_protobuf();
  ::std::string* release_protobuf();
  void set_allocated_protobuf(::std::string* protobuf);

  // @@protoc_insertion_point(class_scope:StockMarket.StockRPCRequest)
 private:
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_protobuf();
  inline void clear_has_protobuf();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr protobuf_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockRPCRequest* default_instance_;
};
// -------------------------------------------------------------------

class StockRPCResponse : public ::google::protobuf::Message {
 public:
  StockRPCResponse();
  virtual ~StockRPCResponse();

  StockRPCResponse(const StockRPCResponse& from);

  inline StockRPCResponse& operator=(const StockRPCResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRPCResponse& default_instance();

  void Swap(StockRPCResponse* other);

  // implements Message ----------------------------------------------

  inline StockRPCResponse* New() const { return New(NULL); }

  StockRPCResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRPCResponse& from);
  void MergeFrom(const StockRPCResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockRPCResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes protobuf = 1;
  bool has_protobuf() const;
  void clear_protobuf();
  static const int kProtobufFieldNumber = 1;
  const ::std::string& protobuf() const;
  void set_protobuf(const ::std::string& value);
  void set_protobuf(const char* value);
  void set_protobuf(const void* value, size_t size);
  ::std::string* mutable_protobuf();
  ::std::string* release_protobuf();
  void set_allocated_protobuf(::std::string* protobuf);

  // optional string error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:StockMarket.StockRPCResponse)
 private:
  inline void set_has_protobuf();
  inline void clear_has_protobuf();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr protobuf_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockRPCResponse* default_instance_;
};
// -------------------------------------------------------------------

class StockRPCAddRequest : public ::google::protobuf::Message {
 public:
  StockRPCAddRequest();
  virtual ~StockRPCAddRequest();

  StockRPCAddRequest(const StockRPCAddRequest& from);

  inline StockRPCAddRequest& operator=(const StockRPCAddRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRPCAddRequest& default_instance();

  void Swap(StockRPCAddRequest* other);

  // implements Message ----------------------------------------------

  inline StockRPCAddRequest* New() const { return New(NULL); }

  StockRPCAddRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRPCAddRequest& from);
  void MergeFrom(const StockRPCAddRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockRPCAddRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 func1 = 1;
  bool has_func1() const;
  void clear_func1();
  static const int kFunc1FieldNumber = 1;
  ::google::protobuf::uint32 func1() const;
  void set_func1(::google::protobuf::uint32 value);

  // required uint32 func2 = 2;
  bool has_func2() const;
  void clear_func2();
  static const int kFunc2FieldNumber = 2;
  ::google::protobuf::uint32 func2() const;
  void set_func2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:StockMarket.StockRPCAddRequest)
 private:
  inline void set_has_func1();
  inline void clear_has_func1();
  inline void set_has_func2();
  inline void clear_has_func2();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 func1_;
  ::google::protobuf::uint32 func2_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockRPCAddRequest* default_instance_;
};
// -------------------------------------------------------------------

class StockRPCAddResponse : public ::google::protobuf::Message {
 public:
  StockRPCAddResponse();
  virtual ~StockRPCAddResponse();

  StockRPCAddResponse(const StockRPCAddResponse& from);

  inline StockRPCAddResponse& operator=(const StockRPCAddResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRPCAddResponse& default_instance();

  void Swap(StockRPCAddResponse* other);

  // implements Message ----------------------------------------------

  inline StockRPCAddResponse* New() const { return New(NULL); }

  StockRPCAddResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRPCAddResponse& from);
  void MergeFrom(const StockRPCAddResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockRPCAddResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sum = 1;
  bool has_sum() const;
  void clear_sum();
  static const int kSumFieldNumber = 1;
  ::google::protobuf::uint32 sum() const;
  void set_sum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:StockMarket.StockRPCAddResponse)
 private:
  inline void set_has_sum();
  inline void clear_has_sum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sum_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockRPCAddResponse* default_instance_;
};
// -------------------------------------------------------------------

class StockRPCReverseRequest : public ::google::protobuf::Message {
 public:
  StockRPCReverseRequest();
  virtual ~StockRPCReverseRequest();

  StockRPCReverseRequest(const StockRPCReverseRequest& from);

  inline StockRPCReverseRequest& operator=(const StockRPCReverseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRPCReverseRequest& default_instance();

  void Swap(StockRPCReverseRequest* other);

  // implements Message ----------------------------------------------

  inline StockRPCReverseRequest* New() const { return New(NULL); }

  StockRPCReverseRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRPCReverseRequest& from);
  void MergeFrom(const StockRPCReverseRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockRPCReverseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string to_reverse = 1;
  bool has_to_reverse() const;
  void clear_to_reverse();
  static const int kToReverseFieldNumber = 1;
  const ::std::string& to_reverse() const;
  void set_to_reverse(const ::std::string& value);
  void set_to_reverse(const char* value);
  void set_to_reverse(const char* value, size_t size);
  ::std::string* mutable_to_reverse();
  ::std::string* release_to_reverse();
  void set_allocated_to_reverse(::std::string* to_reverse);

  // @@protoc_insertion_point(class_scope:StockMarket.StockRPCReverseRequest)
 private:
  inline void set_has_to_reverse();
  inline void clear_has_to_reverse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr to_reverse_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockRPCReverseRequest* default_instance_;
};
// -------------------------------------------------------------------

class StockRPCReverseResponse : public ::google::protobuf::Message {
 public:
  StockRPCReverseResponse();
  virtual ~StockRPCReverseResponse();

  StockRPCReverseResponse(const StockRPCReverseResponse& from);

  inline StockRPCReverseResponse& operator=(const StockRPCReverseResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRPCReverseResponse& default_instance();

  void Swap(StockRPCReverseResponse* other);

  // implements Message ----------------------------------------------

  inline StockRPCReverseResponse* New() const { return New(NULL); }

  StockRPCReverseResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRPCReverseResponse& from);
  void MergeFrom(const StockRPCReverseResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockRPCReverseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string reversed = 1;
  bool has_reversed() const;
  void clear_reversed();
  static const int kReversedFieldNumber = 1;
  const ::std::string& reversed() const;
  void set_reversed(const ::std::string& value);
  void set_reversed(const char* value);
  void set_reversed(const char* value, size_t size);
  ::std::string* mutable_reversed();
  ::std::string* release_reversed();
  void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StockMarket.StockRPCReverseResponse)
 private:
  inline void set_has_reversed();
  inline void clear_has_reversed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockRPCReverseResponse* default_instance_;
};
// -------------------------------------------------------------------

class StockWorkerRequest : public ::google::protobuf::Message {
 public:
  StockWorkerRequest();
  virtual ~StockWorkerRequest();

  StockWorkerRequest(const StockWorkerRequest& from);

  inline StockWorkerRequest& operator=(const StockWorkerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockWorkerRequest& default_instance();

  void Swap(StockWorkerRequest* other);

  // implements Message ----------------------------------------------

  inline StockWorkerRequest* New() const { return New(NULL); }

  StockWorkerRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockWorkerRequest& from);
  void MergeFrom(const StockWorkerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockWorkerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string string_in = 1;
  bool has_string_in() const;
  void clear_string_in();
  static const int kStringInFieldNumber = 1;
  const ::std::string& string_in() const;
  void set_string_in(const ::std::string& value);
  void set_string_in(const char* value);
  void set_string_in(const char* value, size_t size);
  ::std::string* mutable_string_in();
  ::std::string* release_string_in();
  void set_allocated_string_in(::std::string* string_in);

  // @@protoc_insertion_point(class_scope:StockMarket.StockWorkerRequest)
 private:
  inline void set_has_string_in();
  inline void clear_has_string_in();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_in_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockWorkerRequest* default_instance_;
};
// -------------------------------------------------------------------

class StockWorkerResponse : public ::google::protobuf::Message {
 public:
  StockWorkerResponse();
  virtual ~StockWorkerResponse();

  StockWorkerResponse(const StockWorkerResponse& from);

  inline StockWorkerResponse& operator=(const StockWorkerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockWorkerResponse& default_instance();

  void Swap(StockWorkerResponse* other);

  // implements Message ----------------------------------------------

  inline StockWorkerResponse* New() const { return New(NULL); }

  StockWorkerResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockWorkerResponse& from);
  void MergeFrom(const StockWorkerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockWorkerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string string_out = 1;
  bool has_string_out() const;
  void clear_string_out();
  static const int kStringOutFieldNumber = 1;
  const ::std::string& string_out() const;
  void set_string_out(const ::std::string& value);
  void set_string_out(const char* value);
  void set_string_out(const char* value, size_t size);
  ::std::string* mutable_string_out();
  ::std::string* release_string_out();
  void set_allocated_string_out(::std::string* string_out);

  // @@protoc_insertion_point(class_scope:StockMarket.StockWorkerResponse)
 private:
  inline void set_has_string_out();
  inline void clear_has_string_out();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_out_;
  friend void  protobuf_AddDesc_stockmarket_2eproto();
  friend void protobuf_AssignDesc_stockmarket_2eproto();
  friend void protobuf_ShutdownFile_stockmarket_2eproto();

  void InitAsDefaultInstance();
  static StockWorkerResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StockQuote

// required string uuid = 1;
inline bool StockQuote::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQuote::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQuote::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQuote::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& StockQuote::uuid() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQuote::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.uuid)
}
inline void StockQuote::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockQuote.uuid)
}
inline void StockQuote::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockQuote.uuid)
}
inline ::std::string* StockQuote::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuote.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQuote::release_uuid() {
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQuote::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockQuote.uuid)
}

// required string symbol = 2;
inline bool StockQuote::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQuote::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQuote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQuote::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& StockQuote::symbol() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQuote::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.symbol)
}
inline void StockQuote::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockQuote.symbol)
}
inline void StockQuote::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockQuote.symbol)
}
inline ::std::string* StockQuote::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuote.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQuote::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQuote::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockQuote.symbol)
}

// required double timestamp = 3;
inline bool StockQuote::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQuote::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQuote::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQuote::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double StockQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.timestamp)
  return timestamp_;
}
inline void StockQuote::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.timestamp)
}

// required double open = 4;
inline bool StockQuote::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockQuote::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockQuote::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockQuote::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double StockQuote::open() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.open)
  return open_;
}
inline void StockQuote::set_open(double value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.open)
}

// required double high = 5;
inline bool StockQuote::has_high() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockQuote::set_has_high() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockQuote::clear_has_high() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockQuote::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double StockQuote::high() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.high)
  return high_;
}
inline void StockQuote::set_high(double value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.high)
}

// required double low = 6;
inline bool StockQuote::has_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockQuote::set_has_low() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockQuote::clear_has_low() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockQuote::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double StockQuote::low() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.low)
  return low_;
}
inline void StockQuote::set_low(double value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.low)
}

// required double close = 7;
inline bool StockQuote::has_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockQuote::set_has_close() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockQuote::clear_has_close() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockQuote::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline double StockQuote::close() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.close)
  return close_;
}
inline void StockQuote::set_close(double value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.close)
}

// required int64 volume = 8;
inline bool StockQuote::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockQuote::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockQuote::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockQuote::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 StockQuote::volume() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.volume)
  return volume_;
}
inline void StockQuote::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.volume)
}

// required double adjustedClose = 9;
inline bool StockQuote::has_adjustedclose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockQuote::set_has_adjustedclose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockQuote::clear_has_adjustedclose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockQuote::clear_adjustedclose() {
  adjustedclose_ = 0;
  clear_has_adjustedclose();
}
inline double StockQuote::adjustedclose() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.adjustedClose)
  return adjustedclose_;
}
inline void StockQuote::set_adjustedclose(double value) {
  set_has_adjustedclose();
  adjustedclose_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.adjustedClose)
}

// -------------------------------------------------------------------

// StockQuoteResponse

// repeated .StockMarket.StockQuote result = 1;
inline int StockQuoteResponse::result_size() const {
  return result_.size();
}
inline void StockQuoteResponse::clear_result() {
  result_.Clear();
}
inline const ::StockMarket::StockQuote& StockQuoteResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteResponse.result)
  return result_.Get(index);
}
inline ::StockMarket::StockQuote* StockQuoteResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuoteResponse.result)
  return result_.Mutable(index);
}
inline ::StockMarket::StockQuote* StockQuoteResponse::add_result() {
  // @@protoc_insertion_point(field_add:StockMarket.StockQuoteResponse.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StockMarket::StockQuote >&
StockQuoteResponse::result() const {
  // @@protoc_insertion_point(field_list:StockMarket.StockQuoteResponse.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::StockMarket::StockQuote >*
StockQuoteResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:StockMarket.StockQuoteResponse.result)
  return &result_;
}

// -------------------------------------------------------------------

// StockQuoteRequest

// required string symbol = 1;
inline bool StockQuoteRequest::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockQuoteRequest::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockQuoteRequest::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockQuoteRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& StockQuoteRequest::symbol() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteRequest.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQuoteRequest::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockQuoteRequest.symbol)
}
inline void StockQuoteRequest::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockQuoteRequest.symbol)
}
inline void StockQuoteRequest::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockQuoteRequest.symbol)
}
inline ::std::string* StockQuoteRequest::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuoteRequest.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockQuoteRequest::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockQuoteRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockQuoteRequest.symbol)
}

// required int64 start = 2;
inline bool StockQuoteRequest::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockQuoteRequest::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockQuoteRequest::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockQuoteRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::int64 StockQuoteRequest::start() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteRequest.start)
  return start_;
}
inline void StockQuoteRequest::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuoteRequest.start)
}

// required int64 end = 3;
inline bool StockQuoteRequest::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockQuoteRequest::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockQuoteRequest::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockQuoteRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 StockQuoteRequest::end() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteRequest.end)
  return end_;
}
inline void StockQuoteRequest::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuoteRequest.end)
}

// -------------------------------------------------------------------

// StockRPCRequest

// required string service = 1;
inline bool StockRPCRequest::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRPCRequest::set_has_service() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRPCRequest::clear_has_service() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRPCRequest::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service();
}
inline const ::std::string& StockRPCRequest::service() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCRequest.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCRequest::set_service(const ::std::string& value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCRequest.service)
}
inline void StockRPCRequest::set_service(const char* value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCRequest.service)
}
inline void StockRPCRequest::set_service(const char* value, size_t size) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCRequest.service)
}
inline ::std::string* StockRPCRequest::mutable_service() {
  set_has_service();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCRequest.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockRPCRequest::release_service() {
  clear_has_service();
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCRequest::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    set_has_service();
  } else {
    clear_has_service();
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCRequest.service)
}

// required string method = 2;
inline bool StockRPCRequest::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockRPCRequest::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockRPCRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockRPCRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& StockRPCRequest::method() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCRequest.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCRequest.method)
}
inline void StockRPCRequest::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCRequest.method)
}
inline void StockRPCRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCRequest.method)
}
inline ::std::string* StockRPCRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockRPCRequest::release_method() {
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCRequest.method)
}

// required bytes protobuf = 3;
inline bool StockRPCRequest::has_protobuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockRPCRequest::set_has_protobuf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockRPCRequest::clear_has_protobuf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockRPCRequest::clear_protobuf() {
  protobuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protobuf();
}
inline const ::std::string& StockRPCRequest::protobuf() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCRequest.protobuf)
  return protobuf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCRequest::set_protobuf(const ::std::string& value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCRequest.protobuf)
}
inline void StockRPCRequest::set_protobuf(const char* value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCRequest.protobuf)
}
inline void StockRPCRequest::set_protobuf(const void* value, size_t size) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCRequest.protobuf)
}
inline ::std::string* StockRPCRequest::mutable_protobuf() {
  set_has_protobuf();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCRequest.protobuf)
  return protobuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockRPCRequest::release_protobuf() {
  clear_has_protobuf();
  return protobuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCRequest::set_allocated_protobuf(::std::string* protobuf) {
  if (protobuf != NULL) {
    set_has_protobuf();
  } else {
    clear_has_protobuf();
  }
  protobuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protobuf);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCRequest.protobuf)
}

// -------------------------------------------------------------------

// StockRPCResponse

// optional bytes protobuf = 1;
inline bool StockRPCResponse::has_protobuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRPCResponse::set_has_protobuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRPCResponse::clear_has_protobuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRPCResponse::clear_protobuf() {
  protobuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protobuf();
}
inline const ::std::string& StockRPCResponse::protobuf() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCResponse.protobuf)
  return protobuf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCResponse::set_protobuf(const ::std::string& value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCResponse.protobuf)
}
inline void StockRPCResponse::set_protobuf(const char* value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCResponse.protobuf)
}
inline void StockRPCResponse::set_protobuf(const void* value, size_t size) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCResponse.protobuf)
}
inline ::std::string* StockRPCResponse::mutable_protobuf() {
  set_has_protobuf();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCResponse.protobuf)
  return protobuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockRPCResponse::release_protobuf() {
  clear_has_protobuf();
  return protobuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCResponse::set_allocated_protobuf(::std::string* protobuf) {
  if (protobuf != NULL) {
    set_has_protobuf();
  } else {
    clear_has_protobuf();
  }
  protobuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protobuf);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCResponse.protobuf)
}

// optional string error = 2;
inline bool StockRPCResponse::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockRPCResponse::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockRPCResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockRPCResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
inline const ::std::string& StockRPCResponse::error() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCResponse::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCResponse.error)
}
inline void StockRPCResponse::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCResponse.error)
}
inline void StockRPCResponse::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCResponse.error)
}
inline ::std::string* StockRPCResponse::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockRPCResponse::release_error() {
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCResponse.error)
}

// -------------------------------------------------------------------

// StockRPCAddRequest

// required uint32 func1 = 1;
inline bool StockRPCAddRequest::has_func1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRPCAddRequest::set_has_func1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRPCAddRequest::clear_has_func1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRPCAddRequest::clear_func1() {
  func1_ = 0u;
  clear_has_func1();
}
inline ::google::protobuf::uint32 StockRPCAddRequest::func1() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCAddRequest.func1)
  return func1_;
}
inline void StockRPCAddRequest::set_func1(::google::protobuf::uint32 value) {
  set_has_func1();
  func1_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCAddRequest.func1)
}

// required uint32 func2 = 2;
inline bool StockRPCAddRequest::has_func2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockRPCAddRequest::set_has_func2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockRPCAddRequest::clear_has_func2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockRPCAddRequest::clear_func2() {
  func2_ = 0u;
  clear_has_func2();
}
inline ::google::protobuf::uint32 StockRPCAddRequest::func2() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCAddRequest.func2)
  return func2_;
}
inline void StockRPCAddRequest::set_func2(::google::protobuf::uint32 value) {
  set_has_func2();
  func2_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCAddRequest.func2)
}

// -------------------------------------------------------------------

// StockRPCAddResponse

// required uint32 sum = 1;
inline bool StockRPCAddResponse::has_sum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRPCAddResponse::set_has_sum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRPCAddResponse::clear_has_sum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRPCAddResponse::clear_sum() {
  sum_ = 0u;
  clear_has_sum();
}
inline ::google::protobuf::uint32 StockRPCAddResponse::sum() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCAddResponse.sum)
  return sum_;
}
inline void StockRPCAddResponse::set_sum(::google::protobuf::uint32 value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCAddResponse.sum)
}

// -------------------------------------------------------------------

// StockRPCReverseRequest

// required string to_reverse = 1;
inline bool StockRPCReverseRequest::has_to_reverse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRPCReverseRequest::set_has_to_reverse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRPCReverseRequest::clear_has_to_reverse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRPCReverseRequest::clear_to_reverse() {
  to_reverse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_reverse();
}
inline const ::std::string& StockRPCReverseRequest::to_reverse() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCReverseRequest.to_reverse)
  return to_reverse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCReverseRequest::set_to_reverse(const ::std::string& value) {
  set_has_to_reverse();
  to_reverse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCReverseRequest.to_reverse)
}
inline void StockRPCReverseRequest::set_to_reverse(const char* value) {
  set_has_to_reverse();
  to_reverse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCReverseRequest.to_reverse)
}
inline void StockRPCReverseRequest::set_to_reverse(const char* value, size_t size) {
  set_has_to_reverse();
  to_reverse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCReverseRequest.to_reverse)
}
inline ::std::string* StockRPCReverseRequest::mutable_to_reverse() {
  set_has_to_reverse();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCReverseRequest.to_reverse)
  return to_reverse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockRPCReverseRequest::release_to_reverse() {
  clear_has_to_reverse();
  return to_reverse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCReverseRequest::set_allocated_to_reverse(::std::string* to_reverse) {
  if (to_reverse != NULL) {
    set_has_to_reverse();
  } else {
    clear_has_to_reverse();
  }
  to_reverse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_reverse);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCReverseRequest.to_reverse)
}

// -------------------------------------------------------------------

// StockRPCReverseResponse

// required string reversed = 1;
inline bool StockRPCReverseResponse::has_reversed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRPCReverseResponse::set_has_reversed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRPCReverseResponse::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRPCReverseResponse::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& StockRPCReverseResponse::reversed() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCReverseResponse.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCReverseResponse::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCReverseResponse.reversed)
}
inline void StockRPCReverseResponse::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCReverseResponse.reversed)
}
inline void StockRPCReverseResponse::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCReverseResponse.reversed)
}
inline ::std::string* StockRPCReverseResponse::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCReverseResponse.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockRPCReverseResponse::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockRPCReverseResponse::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCReverseResponse.reversed)
}

// -------------------------------------------------------------------

// StockWorkerRequest

// required string string_in = 1;
inline bool StockWorkerRequest::has_string_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockWorkerRequest::set_has_string_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockWorkerRequest::clear_has_string_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockWorkerRequest::clear_string_in() {
  string_in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_in();
}
inline const ::std::string& StockWorkerRequest::string_in() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockWorkerRequest.string_in)
  return string_in_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockWorkerRequest::set_string_in(const ::std::string& value) {
  set_has_string_in();
  string_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockWorkerRequest.string_in)
}
inline void StockWorkerRequest::set_string_in(const char* value) {
  set_has_string_in();
  string_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockWorkerRequest.string_in)
}
inline void StockWorkerRequest::set_string_in(const char* value, size_t size) {
  set_has_string_in();
  string_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockWorkerRequest.string_in)
}
inline ::std::string* StockWorkerRequest::mutable_string_in() {
  set_has_string_in();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockWorkerRequest.string_in)
  return string_in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockWorkerRequest::release_string_in() {
  clear_has_string_in();
  return string_in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockWorkerRequest::set_allocated_string_in(::std::string* string_in) {
  if (string_in != NULL) {
    set_has_string_in();
  } else {
    clear_has_string_in();
  }
  string_in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_in);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockWorkerRequest.string_in)
}

// -------------------------------------------------------------------

// StockWorkerResponse

// required string string_out = 1;
inline bool StockWorkerResponse::has_string_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockWorkerResponse::set_has_string_out() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockWorkerResponse::clear_has_string_out() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockWorkerResponse::clear_string_out() {
  string_out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_out();
}
inline const ::std::string& StockWorkerResponse::string_out() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockWorkerResponse.string_out)
  return string_out_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockWorkerResponse::set_string_out(const ::std::string& value) {
  set_has_string_out();
  string_out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockWorkerResponse.string_out)
}
inline void StockWorkerResponse::set_string_out(const char* value) {
  set_has_string_out();
  string_out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockWorkerResponse.string_out)
}
inline void StockWorkerResponse::set_string_out(const char* value, size_t size) {
  set_has_string_out();
  string_out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockWorkerResponse.string_out)
}
inline ::std::string* StockWorkerResponse::mutable_string_out() {
  set_has_string_out();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockWorkerResponse.string_out)
  return string_out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockWorkerResponse::release_string_out() {
  clear_has_string_out();
  return string_out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockWorkerResponse::set_allocated_string_out(::std::string* string_out) {
  if (string_out != NULL) {
    set_has_string_out();
  } else {
    clear_has_string_out();
  }
  string_out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_out);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockWorkerResponse.string_out)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StockMarket

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::StockMarket::RPCError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StockMarket::RPCError>() {
  return ::StockMarket::RPCError_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stockmarket_2eproto__INCLUDED
