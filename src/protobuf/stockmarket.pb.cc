// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockmarket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stockmarket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StockMarket {

namespace {

const ::google::protobuf::Descriptor* StockQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockQuoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockQuoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockQuoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockQuoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockRPCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRPCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockRPCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRPCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockRPCAddRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRPCAddRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockRPCAddResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRPCAddResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockRPCReverseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRPCReverseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockRPCReverseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRPCReverseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockWorkerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockWorkerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockWorkerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockWorkerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RPCError_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_stockmarket_2eproto() {
  protobuf_AddDesc_stockmarket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stockmarket.proto");
  GOOGLE_CHECK(file != NULL);
  StockQuote_descriptor_ = file->message_type(0);
  static const int StockQuote_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, adjustedclose_),
  };
  StockQuote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockQuote_descriptor_,
      StockQuote::default_instance_,
      StockQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockQuote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuote, _internal_metadata_),
      -1);
  StockQuoteResponse_descriptor_ = file->message_type(1);
  static const int StockQuoteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteResponse, result_),
  };
  StockQuoteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockQuoteResponse_descriptor_,
      StockQuoteResponse::default_instance_,
      StockQuoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockQuoteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteResponse, _internal_metadata_),
      -1);
  StockQuoteRequest_descriptor_ = file->message_type(2);
  static const int StockQuoteRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteRequest, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteRequest, end_),
  };
  StockQuoteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockQuoteRequest_descriptor_,
      StockQuoteRequest::default_instance_,
      StockQuoteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockQuoteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockQuoteRequest, _internal_metadata_),
      -1);
  StockRPCRequest_descriptor_ = file->message_type(3);
  static const int StockRPCRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCRequest, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCRequest, protobuf_),
  };
  StockRPCRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockRPCRequest_descriptor_,
      StockRPCRequest::default_instance_,
      StockRPCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockRPCRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCRequest, _internal_metadata_),
      -1);
  StockRPCResponse_descriptor_ = file->message_type(4);
  static const int StockRPCResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCResponse, protobuf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCResponse, error_),
  };
  StockRPCResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockRPCResponse_descriptor_,
      StockRPCResponse::default_instance_,
      StockRPCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockRPCResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCResponse, _internal_metadata_),
      -1);
  StockRPCAddRequest_descriptor_ = file->message_type(5);
  static const int StockRPCAddRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCAddRequest, func1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCAddRequest, func2_),
  };
  StockRPCAddRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockRPCAddRequest_descriptor_,
      StockRPCAddRequest::default_instance_,
      StockRPCAddRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCAddRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockRPCAddRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCAddRequest, _internal_metadata_),
      -1);
  StockRPCAddResponse_descriptor_ = file->message_type(6);
  static const int StockRPCAddResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCAddResponse, sum_),
  };
  StockRPCAddResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockRPCAddResponse_descriptor_,
      StockRPCAddResponse::default_instance_,
      StockRPCAddResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCAddResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockRPCAddResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCAddResponse, _internal_metadata_),
      -1);
  StockRPCReverseRequest_descriptor_ = file->message_type(7);
  static const int StockRPCReverseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCReverseRequest, to_reverse_),
  };
  StockRPCReverseRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockRPCReverseRequest_descriptor_,
      StockRPCReverseRequest::default_instance_,
      StockRPCReverseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCReverseRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockRPCReverseRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCReverseRequest, _internal_metadata_),
      -1);
  StockRPCReverseResponse_descriptor_ = file->message_type(8);
  static const int StockRPCReverseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCReverseResponse, reversed_),
  };
  StockRPCReverseResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockRPCReverseResponse_descriptor_,
      StockRPCReverseResponse::default_instance_,
      StockRPCReverseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCReverseResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockRPCReverseResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRPCReverseResponse, _internal_metadata_),
      -1);
  StockWorkerRequest_descriptor_ = file->message_type(9);
  static const int StockWorkerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockWorkerRequest, string_in_),
  };
  StockWorkerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockWorkerRequest_descriptor_,
      StockWorkerRequest::default_instance_,
      StockWorkerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockWorkerRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockWorkerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockWorkerRequest, _internal_metadata_),
      -1);
  StockWorkerResponse_descriptor_ = file->message_type(10);
  static const int StockWorkerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockWorkerResponse, string_out_),
  };
  StockWorkerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockWorkerResponse_descriptor_,
      StockWorkerResponse::default_instance_,
      StockWorkerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockWorkerResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockWorkerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockWorkerResponse, _internal_metadata_),
      -1);
  RPCError_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stockmarket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockQuote_descriptor_, &StockQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockQuoteResponse_descriptor_, &StockQuoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockQuoteRequest_descriptor_, &StockQuoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockRPCRequest_descriptor_, &StockRPCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockRPCResponse_descriptor_, &StockRPCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockRPCAddRequest_descriptor_, &StockRPCAddRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockRPCAddResponse_descriptor_, &StockRPCAddResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockRPCReverseRequest_descriptor_, &StockRPCReverseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockRPCReverseResponse_descriptor_, &StockRPCReverseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockWorkerRequest_descriptor_, &StockWorkerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockWorkerResponse_descriptor_, &StockWorkerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stockmarket_2eproto() {
  delete StockQuote::default_instance_;
  delete StockQuote_reflection_;
  delete StockQuoteResponse::default_instance_;
  delete StockQuoteResponse_reflection_;
  delete StockQuoteRequest::default_instance_;
  delete StockQuoteRequest_reflection_;
  delete StockRPCRequest::default_instance_;
  delete StockRPCRequest_reflection_;
  delete StockRPCResponse::default_instance_;
  delete StockRPCResponse_reflection_;
  delete StockRPCAddRequest::default_instance_;
  delete StockRPCAddRequest_reflection_;
  delete StockRPCAddResponse::default_instance_;
  delete StockRPCAddResponse_reflection_;
  delete StockRPCReverseRequest::default_instance_;
  delete StockRPCReverseRequest_reflection_;
  delete StockRPCReverseResponse::default_instance_;
  delete StockRPCReverseResponse_reflection_;
  delete StockWorkerRequest::default_instance_;
  delete StockWorkerRequest_reflection_;
  delete StockWorkerResponse::default_instance_;
  delete StockWorkerResponse_reflection_;
}

void protobuf_AddDesc_stockmarket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021stockmarket.proto\022\013StockMarket\"\234\001\n\nSto"
    "ckQuote\022\014\n\004uuid\030\001 \002(\t\022\016\n\006symbol\030\002 \002(\t\022\021\n"
    "\ttimestamp\030\003 \002(\001\022\014\n\004open\030\004 \002(\001\022\014\n\004high\030\005"
    " \002(\001\022\013\n\003low\030\006 \002(\001\022\r\n\005close\030\007 \002(\001\022\016\n\006volu"
    "me\030\010 \002(\003\022\025\n\radjustedClose\030\t \002(\001\"=\n\022Stock"
    "QuoteResponse\022\'\n\006result\030\001 \003(\0132\027.StockMar"
    "ket.StockQuote\"\?\n\021StockQuoteRequest\022\016\n\006s"
    "ymbol\030\001 \002(\t\022\r\n\005start\030\002 \002(\003\022\013\n\003end\030\003 \002(\003\""
    "D\n\017StockRPCRequest\022\017\n\007service\030\001 \002(\t\022\016\n\006m"
    "ethod\030\002 \002(\t\022\020\n\010protobuf\030\003 \002(\014\"3\n\020StockRP"
    "CResponse\022\020\n\010protobuf\030\001 \001(\014\022\r\n\005error\030\002 \001"
    "(\t\"2\n\022StockRPCAddRequest\022\r\n\005func1\030\001 \002(\r\022"
    "\r\n\005func2\030\002 \002(\r\"\"\n\023StockRPCAddResponse\022\013\n"
    "\003sum\030\001 \002(\r\",\n\026StockRPCReverseRequest\022\022\n\n"
    "to_reverse\030\001 \002(\t\"+\n\027StockRPCReverseRespo"
    "nse\022\020\n\010reversed\030\001 \002(\t\"\'\n\022StockWorkerRequ"
    "est\022\021\n\tstring_in\030\001 \002(\t\")\n\023StockWorkerRes"
    "ponse\022\022\n\nstring_out\030\001 \002(\t*:\n\010RPCError\022\016\n"
    "\nNO_SERVICE\020\001\022\r\n\tNO_METHOD\020\002\022\017\n\013BAD_REQU"
    "EST\020\003", 765);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stockmarket.proto", &protobuf_RegisterTypes);
  StockQuote::default_instance_ = new StockQuote();
  StockQuoteResponse::default_instance_ = new StockQuoteResponse();
  StockQuoteRequest::default_instance_ = new StockQuoteRequest();
  StockRPCRequest::default_instance_ = new StockRPCRequest();
  StockRPCResponse::default_instance_ = new StockRPCResponse();
  StockRPCAddRequest::default_instance_ = new StockRPCAddRequest();
  StockRPCAddResponse::default_instance_ = new StockRPCAddResponse();
  StockRPCReverseRequest::default_instance_ = new StockRPCReverseRequest();
  StockRPCReverseResponse::default_instance_ = new StockRPCReverseResponse();
  StockWorkerRequest::default_instance_ = new StockWorkerRequest();
  StockWorkerResponse::default_instance_ = new StockWorkerResponse();
  StockQuote::default_instance_->InitAsDefaultInstance();
  StockQuoteResponse::default_instance_->InitAsDefaultInstance();
  StockQuoteRequest::default_instance_->InitAsDefaultInstance();
  StockRPCRequest::default_instance_->InitAsDefaultInstance();
  StockRPCResponse::default_instance_->InitAsDefaultInstance();
  StockRPCAddRequest::default_instance_->InitAsDefaultInstance();
  StockRPCAddResponse::default_instance_->InitAsDefaultInstance();
  StockRPCReverseRequest::default_instance_->InitAsDefaultInstance();
  StockRPCReverseResponse::default_instance_->InitAsDefaultInstance();
  StockWorkerRequest::default_instance_->InitAsDefaultInstance();
  StockWorkerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stockmarket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stockmarket_2eproto {
  StaticDescriptorInitializer_stockmarket_2eproto() {
    protobuf_AddDesc_stockmarket_2eproto();
  }
} static_descriptor_initializer_stockmarket_2eproto_;
const ::google::protobuf::EnumDescriptor* RPCError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCError_descriptor_;
}
bool RPCError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int StockQuote::kUuidFieldNumber;
const int StockQuote::kSymbolFieldNumber;
const int StockQuote::kTimestampFieldNumber;
const int StockQuote::kOpenFieldNumber;
const int StockQuote::kHighFieldNumber;
const int StockQuote::kLowFieldNumber;
const int StockQuote::kCloseFieldNumber;
const int StockQuote::kVolumeFieldNumber;
const int StockQuote::kAdjustedCloseFieldNumber;
#endif  // !_MSC_VER

StockQuote::StockQuote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockQuote)
}

void StockQuote::InitAsDefaultInstance() {
}

StockQuote::StockQuote(const StockQuote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockQuote)
}

void StockQuote::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  adjustedclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockQuote::~StockQuote() {
  // @@protoc_insertion_point(destructor:StockMarket.StockQuote)
  SharedDtor();
}

void StockQuote::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockQuote_descriptor_;
}

const StockQuote& StockQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockQuote* StockQuote::default_instance_ = NULL;

StockQuote* StockQuote::New(::google::protobuf::Arena* arena) const {
  StockQuote* n = new StockQuote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockQuote::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StockQuote*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamp_, volume_);
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  adjustedclose_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockQuote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockQuote.uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockQuote.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_timestamp;
        break;
      }

      // required double timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_open;
        break;
      }

      // required double open = 4;
      case 4: {
        if (tag == 33) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_high;
        break;
      }

      // required double high = 5;
      case 5: {
        if (tag == 41) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_low;
        break;
      }

      // required double low = 6;
      case 6: {
        if (tag == 49) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_close;
        break;
      }

      // required double close = 7;
      case 7: {
        if (tag == 57) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }

      // required int64 volume = 8;
      case 8: {
        if (tag == 64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_adjustedClose;
        break;
      }

      // required double adjustedClose = 9;
      case 9: {
        if (tag == 73) {
         parse_adjustedClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adjustedclose_)));
          set_has_adjustedclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockQuote)
  return false;
#undef DO_
}

void StockQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockQuote)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockQuote.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockQuote.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // required double timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  // required double open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->open(), output);
  }

  // required double high = 5;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->high(), output);
  }

  // required double low = 6;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->low(), output);
  }

  // required double close = 7;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->close(), output);
  }

  // required int64 volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->volume(), output);
  }

  // required double adjustedClose = 9;
  if (has_adjustedclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->adjustedclose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockQuote)
}

::google::protobuf::uint8* StockQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockQuote)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockQuote.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockQuote.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required double timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  // required double open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->open(), target);
  }

  // required double high = 5;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->high(), target);
  }

  // required double low = 6;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->low(), target);
  }

  // required double close = 7;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->close(), target);
  }

  // required int64 volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->volume(), target);
  }

  // required double adjustedClose = 9;
  if (has_adjustedclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->adjustedclose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockQuote)
  return target;
}

int StockQuote::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uuid()) {
    // required string uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  if (has_symbol()) {
    // required string symbol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  if (has_timestamp()) {
    // required double timestamp = 3;
    total_size += 1 + 8;
  }

  if (has_open()) {
    // required double open = 4;
    total_size += 1 + 8;
  }

  if (has_high()) {
    // required double high = 5;
    total_size += 1 + 8;
  }

  if (has_low()) {
    // required double low = 6;
    total_size += 1 + 8;
  }

  if (has_close()) {
    // required double close = 7;
    total_size += 1 + 8;
  }

  if (has_volume()) {
    // required int64 volume = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  if (has_adjustedclose()) {
    // required double adjustedClose = 9;
    total_size += 1 + 8;
  }

  return total_size;
}
int StockQuote::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string uuid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

    // required string symbol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());

    // required double timestamp = 3;
    total_size += 1 + 8;

    // required double open = 4;
    total_size += 1 + 8;

    // required double high = 5;
    total_size += 1 + 8;

    // required double low = 6;
    total_size += 1 + 8;

    // required double close = 7;
    total_size += 1 + 8;

    // required int64 volume = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());

    // required double adjustedClose = 9;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockQuote::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockQuote* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQuote>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockQuote::MergeFrom(const StockQuote& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adjustedclose()) {
      set_adjustedclose(from.adjustedclose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQuote::CopyFrom(const StockQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQuote::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void StockQuote::Swap(StockQuote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQuote::InternalSwap(StockQuote* other) {
  uuid_.Swap(&other->uuid_);
  symbol_.Swap(&other->symbol_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(close_, other->close_);
  std::swap(volume_, other->volume_);
  std::swap(adjustedclose_, other->adjustedclose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockQuote_descriptor_;
  metadata.reflection = StockQuote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockQuote

// required string uuid = 1;
bool StockQuote::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockQuote::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void StockQuote::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockQuote::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
 const ::std::string& StockQuote::uuid() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockQuote::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.uuid)
}
 void StockQuote::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockQuote.uuid)
}
 void StockQuote::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockQuote.uuid)
}
 ::std::string* StockQuote::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuote.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockQuote::release_uuid() {
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockQuote::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockQuote.uuid)
}

// required string symbol = 2;
bool StockQuote::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StockQuote::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
void StockQuote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
void StockQuote::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
 const ::std::string& StockQuote::symbol() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockQuote::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.symbol)
}
 void StockQuote::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockQuote.symbol)
}
 void StockQuote::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockQuote.symbol)
}
 ::std::string* StockQuote::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuote.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockQuote::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockQuote::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockQuote.symbol)
}

// required double timestamp = 3;
bool StockQuote::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StockQuote::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void StockQuote::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void StockQuote::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double StockQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.timestamp)
  return timestamp_;
}
 void StockQuote::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.timestamp)
}

// required double open = 4;
bool StockQuote::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StockQuote::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
void StockQuote::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
void StockQuote::clear_open() {
  open_ = 0;
  clear_has_open();
}
 double StockQuote::open() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.open)
  return open_;
}
 void StockQuote::set_open(double value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.open)
}

// required double high = 5;
bool StockQuote::has_high() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StockQuote::set_has_high() {
  _has_bits_[0] |= 0x00000010u;
}
void StockQuote::clear_has_high() {
  _has_bits_[0] &= ~0x00000010u;
}
void StockQuote::clear_high() {
  high_ = 0;
  clear_has_high();
}
 double StockQuote::high() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.high)
  return high_;
}
 void StockQuote::set_high(double value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.high)
}

// required double low = 6;
bool StockQuote::has_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StockQuote::set_has_low() {
  _has_bits_[0] |= 0x00000020u;
}
void StockQuote::clear_has_low() {
  _has_bits_[0] &= ~0x00000020u;
}
void StockQuote::clear_low() {
  low_ = 0;
  clear_has_low();
}
 double StockQuote::low() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.low)
  return low_;
}
 void StockQuote::set_low(double value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.low)
}

// required double close = 7;
bool StockQuote::has_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StockQuote::set_has_close() {
  _has_bits_[0] |= 0x00000040u;
}
void StockQuote::clear_has_close() {
  _has_bits_[0] &= ~0x00000040u;
}
void StockQuote::clear_close() {
  close_ = 0;
  clear_has_close();
}
 double StockQuote::close() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.close)
  return close_;
}
 void StockQuote::set_close(double value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.close)
}

// required int64 volume = 8;
bool StockQuote::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StockQuote::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
void StockQuote::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
void StockQuote::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
 ::google::protobuf::int64 StockQuote::volume() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.volume)
  return volume_;
}
 void StockQuote::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.volume)
}

// required double adjustedClose = 9;
bool StockQuote::has_adjustedclose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StockQuote::set_has_adjustedclose() {
  _has_bits_[0] |= 0x00000100u;
}
void StockQuote::clear_has_adjustedclose() {
  _has_bits_[0] &= ~0x00000100u;
}
void StockQuote::clear_adjustedclose() {
  adjustedclose_ = 0;
  clear_has_adjustedclose();
}
 double StockQuote::adjustedclose() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuote.adjustedClose)
  return adjustedclose_;
}
 void StockQuote::set_adjustedclose(double value) {
  set_has_adjustedclose();
  adjustedclose_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuote.adjustedClose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockQuoteResponse::kResultFieldNumber;
#endif  // !_MSC_VER

StockQuoteResponse::StockQuoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockQuoteResponse)
}

void StockQuoteResponse::InitAsDefaultInstance() {
}

StockQuoteResponse::StockQuoteResponse(const StockQuoteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockQuoteResponse)
}

void StockQuoteResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockQuoteResponse::~StockQuoteResponse() {
  // @@protoc_insertion_point(destructor:StockMarket.StockQuoteResponse)
  SharedDtor();
}

void StockQuoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockQuoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockQuoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockQuoteResponse_descriptor_;
}

const StockQuoteResponse& StockQuoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockQuoteResponse* StockQuoteResponse::default_instance_ = NULL;

StockQuoteResponse* StockQuoteResponse::New(::google::protobuf::Arena* arena) const {
  StockQuoteResponse* n = new StockQuoteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockQuoteResponse::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockQuoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockQuoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StockMarket.StockQuote result = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_result;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockQuoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockQuoteResponse)
  return false;
#undef DO_
}

void StockQuoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockQuoteResponse)
  // repeated .StockMarket.StockQuote result = 1;
  for (unsigned int i = 0, n = this->result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockQuoteResponse)
}

::google::protobuf::uint8* StockQuoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockQuoteResponse)
  // repeated .StockMarket.StockQuote result = 1;
  for (unsigned int i = 0, n = this->result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockQuoteResponse)
  return target;
}

int StockQuoteResponse::ByteSize() const {
  int total_size = 0;

  // repeated .StockMarket.StockQuote result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockQuoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockQuoteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQuoteResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockQuoteResponse::MergeFrom(const StockQuoteResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  result_.MergeFrom(from.result_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockQuoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQuoteResponse::CopyFrom(const StockQuoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQuoteResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void StockQuoteResponse::Swap(StockQuoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQuoteResponse::InternalSwap(StockQuoteResponse* other) {
  result_.UnsafeArenaSwap(&other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockQuoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockQuoteResponse_descriptor_;
  metadata.reflection = StockQuoteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockQuoteResponse

// repeated .StockMarket.StockQuote result = 1;
int StockQuoteResponse::result_size() const {
  return result_.size();
}
void StockQuoteResponse::clear_result() {
  result_.Clear();
}
 const ::StockMarket::StockQuote& StockQuoteResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteResponse.result)
  return result_.Get(index);
}
 ::StockMarket::StockQuote* StockQuoteResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuoteResponse.result)
  return result_.Mutable(index);
}
 ::StockMarket::StockQuote* StockQuoteResponse::add_result() {
  // @@protoc_insertion_point(field_add:StockMarket.StockQuoteResponse.result)
  return result_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::StockMarket::StockQuote >&
StockQuoteResponse::result() const {
  // @@protoc_insertion_point(field_list:StockMarket.StockQuoteResponse.result)
  return result_;
}
 ::google::protobuf::RepeatedPtrField< ::StockMarket::StockQuote >*
StockQuoteResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:StockMarket.StockQuoteResponse.result)
  return &result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockQuoteRequest::kSymbolFieldNumber;
const int StockQuoteRequest::kStartFieldNumber;
const int StockQuoteRequest::kEndFieldNumber;
#endif  // !_MSC_VER

StockQuoteRequest::StockQuoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockQuoteRequest)
}

void StockQuoteRequest::InitAsDefaultInstance() {
}

StockQuoteRequest::StockQuoteRequest(const StockQuoteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockQuoteRequest)
}

void StockQuoteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockQuoteRequest::~StockQuoteRequest() {
  // @@protoc_insertion_point(destructor:StockMarket.StockQuoteRequest)
  SharedDtor();
}

void StockQuoteRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockQuoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockQuoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockQuoteRequest_descriptor_;
}

const StockQuoteRequest& StockQuoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockQuoteRequest* StockQuoteRequest::default_instance_ = NULL;

StockQuoteRequest* StockQuoteRequest::New(::google::protobuf::Arena* arena) const {
  StockQuoteRequest* n = new StockQuoteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockQuoteRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StockQuoteRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(start_, end_);
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockQuoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockQuoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockQuoteRequest.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // required int64 start = 2;
      case 2: {
        if (tag == 16) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // required int64 end = 3;
      case 3: {
        if (tag == 24) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockQuoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockQuoteRequest)
  return false;
#undef DO_
}

void StockQuoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockQuoteRequest)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockQuoteRequest.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // required int64 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start(), output);
  }

  // required int64 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockQuoteRequest)
}

::google::protobuf::uint8* StockQuoteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockQuoteRequest)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockQuoteRequest.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required int64 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start(), target);
  }

  // required int64 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockQuoteRequest)
  return target;
}

int StockQuoteRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_symbol()) {
    // required string symbol = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  if (has_start()) {
    // required int64 start = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  if (has_end()) {
    // required int64 end = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  return total_size;
}
int StockQuoteRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string symbol = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());

    // required int64 start = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());

    // required int64 end = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockQuoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockQuoteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockQuoteRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockQuoteRequest::MergeFrom(const StockQuoteRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockQuoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockQuoteRequest::CopyFrom(const StockQuoteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQuoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StockQuoteRequest::Swap(StockQuoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockQuoteRequest::InternalSwap(StockQuoteRequest* other) {
  symbol_.Swap(&other->symbol_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockQuoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockQuoteRequest_descriptor_;
  metadata.reflection = StockQuoteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockQuoteRequest

// required string symbol = 1;
bool StockQuoteRequest::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockQuoteRequest::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
void StockQuoteRequest::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockQuoteRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
 const ::std::string& StockQuoteRequest::symbol() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteRequest.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockQuoteRequest::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockQuoteRequest.symbol)
}
 void StockQuoteRequest::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockQuoteRequest.symbol)
}
 void StockQuoteRequest::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockQuoteRequest.symbol)
}
 ::std::string* StockQuoteRequest::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockQuoteRequest.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockQuoteRequest::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockQuoteRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockQuoteRequest.symbol)
}

// required int64 start = 2;
bool StockQuoteRequest::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StockQuoteRequest::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
void StockQuoteRequest::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void StockQuoteRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
 ::google::protobuf::int64 StockQuoteRequest::start() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteRequest.start)
  return start_;
}
 void StockQuoteRequest::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuoteRequest.start)
}

// required int64 end = 3;
bool StockQuoteRequest::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StockQuoteRequest::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
void StockQuoteRequest::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void StockQuoteRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
 ::google::protobuf::int64 StockQuoteRequest::end() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockQuoteRequest.end)
  return end_;
}
 void StockQuoteRequest::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockQuoteRequest.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockRPCRequest::kServiceFieldNumber;
const int StockRPCRequest::kMethodFieldNumber;
const int StockRPCRequest::kProtobufFieldNumber;
#endif  // !_MSC_VER

StockRPCRequest::StockRPCRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockRPCRequest)
}

void StockRPCRequest::InitAsDefaultInstance() {
}

StockRPCRequest::StockRPCRequest(const StockRPCRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockRPCRequest)
}

void StockRPCRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protobuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRPCRequest::~StockRPCRequest() {
  // @@protoc_insertion_point(destructor:StockMarket.StockRPCRequest)
  SharedDtor();
}

void StockRPCRequest::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protobuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockRPCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRPCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRPCRequest_descriptor_;
}

const StockRPCRequest& StockRPCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockRPCRequest* StockRPCRequest::default_instance_ = NULL;

StockRPCRequest* StockRPCRequest::New(::google::protobuf::Arena* arena) const {
  StockRPCRequest* n = new StockRPCRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockRPCRequest::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_service()) {
      service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_method()) {
      method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_protobuf()) {
      protobuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockRPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockRPCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockRPCRequest.service");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }

      // required string method = 2;
      case 2: {
        if (tag == 18) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockRPCRequest.method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_protobuf;
        break;
      }

      // required bytes protobuf = 3;
      case 3: {
        if (tag == 26) {
         parse_protobuf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protobuf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockRPCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockRPCRequest)
  return false;
#undef DO_
}

void StockRPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockRPCRequest)
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCRequest.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCRequest.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  // required bytes protobuf = 3;
  if (has_protobuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->protobuf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockRPCRequest)
}

::google::protobuf::uint8* StockRPCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockRPCRequest)
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCRequest.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCRequest.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  // required bytes protobuf = 3;
  if (has_protobuf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->protobuf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockRPCRequest)
  return target;
}

int StockRPCRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_service()) {
    // required string service = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  if (has_method()) {
    // required string method = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  if (has_protobuf()) {
    // required bytes protobuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->protobuf());
  }

  return total_size;
}
int StockRPCRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string service = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());

    // required string method = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());

    // required bytes protobuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->protobuf());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockRPCRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockRPCRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRPCRequest::MergeFrom(const StockRPCRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_has_service();
      service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
    }
    if (from.has_method()) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (from.has_protobuf()) {
      set_has_protobuf();
      protobuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protobuf_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockRPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRPCRequest::CopyFrom(const StockRPCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRPCRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StockRPCRequest::Swap(StockRPCRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockRPCRequest::InternalSwap(StockRPCRequest* other) {
  service_.Swap(&other->service_);
  method_.Swap(&other->method_);
  protobuf_.Swap(&other->protobuf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockRPCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRPCRequest_descriptor_;
  metadata.reflection = StockRPCRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockRPCRequest

// required string service = 1;
bool StockRPCRequest::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockRPCRequest::set_has_service() {
  _has_bits_[0] |= 0x00000001u;
}
void StockRPCRequest::clear_has_service() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockRPCRequest::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service();
}
 const ::std::string& StockRPCRequest::service() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCRequest.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCRequest::set_service(const ::std::string& value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCRequest.service)
}
 void StockRPCRequest::set_service(const char* value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCRequest.service)
}
 void StockRPCRequest::set_service(const char* value, size_t size) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCRequest.service)
}
 ::std::string* StockRPCRequest::mutable_service() {
  set_has_service();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCRequest.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockRPCRequest::release_service() {
  clear_has_service();
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCRequest::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    set_has_service();
  } else {
    clear_has_service();
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCRequest.service)
}

// required string method = 2;
bool StockRPCRequest::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StockRPCRequest::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
void StockRPCRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
void StockRPCRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
 const ::std::string& StockRPCRequest::method() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCRequest.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCRequest.method)
}
 void StockRPCRequest::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCRequest.method)
}
 void StockRPCRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCRequest.method)
}
 ::std::string* StockRPCRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockRPCRequest::release_method() {
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCRequest.method)
}

// required bytes protobuf = 3;
bool StockRPCRequest::has_protobuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StockRPCRequest::set_has_protobuf() {
  _has_bits_[0] |= 0x00000004u;
}
void StockRPCRequest::clear_has_protobuf() {
  _has_bits_[0] &= ~0x00000004u;
}
void StockRPCRequest::clear_protobuf() {
  protobuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protobuf();
}
 const ::std::string& StockRPCRequest::protobuf() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCRequest.protobuf)
  return protobuf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCRequest::set_protobuf(const ::std::string& value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCRequest.protobuf)
}
 void StockRPCRequest::set_protobuf(const char* value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCRequest.protobuf)
}
 void StockRPCRequest::set_protobuf(const void* value, size_t size) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCRequest.protobuf)
}
 ::std::string* StockRPCRequest::mutable_protobuf() {
  set_has_protobuf();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCRequest.protobuf)
  return protobuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockRPCRequest::release_protobuf() {
  clear_has_protobuf();
  return protobuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCRequest::set_allocated_protobuf(::std::string* protobuf) {
  if (protobuf != NULL) {
    set_has_protobuf();
  } else {
    clear_has_protobuf();
  }
  protobuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protobuf);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCRequest.protobuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockRPCResponse::kProtobufFieldNumber;
const int StockRPCResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

StockRPCResponse::StockRPCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockRPCResponse)
}

void StockRPCResponse::InitAsDefaultInstance() {
}

StockRPCResponse::StockRPCResponse(const StockRPCResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockRPCResponse)
}

void StockRPCResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protobuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRPCResponse::~StockRPCResponse() {
  // @@protoc_insertion_point(destructor:StockMarket.StockRPCResponse)
  SharedDtor();
}

void StockRPCResponse::SharedDtor() {
  protobuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockRPCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRPCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRPCResponse_descriptor_;
}

const StockRPCResponse& StockRPCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockRPCResponse* StockRPCResponse::default_instance_ = NULL;

StockRPCResponse* StockRPCResponse::New(::google::protobuf::Arena* arena) const {
  StockRPCResponse* n = new StockRPCResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockRPCResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_protobuf()) {
      protobuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockRPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockRPCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes protobuf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protobuf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockRPCResponse.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockRPCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockRPCResponse)
  return false;
#undef DO_
}

void StockRPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockRPCResponse)
  // optional bytes protobuf = 1;
  if (has_protobuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->protobuf(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockRPCResponse)
}

::google::protobuf::uint8* StockRPCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockRPCResponse)
  // optional bytes protobuf = 1;
  if (has_protobuf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->protobuf(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockRPCResponse)
  return target;
}

int StockRPCResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes protobuf = 1;
    if (has_protobuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protobuf());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockRPCResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockRPCResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRPCResponse::MergeFrom(const StockRPCResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protobuf()) {
      set_has_protobuf();
      protobuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protobuf_);
    }
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockRPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRPCResponse::CopyFrom(const StockRPCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRPCResponse::IsInitialized() const {

  return true;
}

void StockRPCResponse::Swap(StockRPCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockRPCResponse::InternalSwap(StockRPCResponse* other) {
  protobuf_.Swap(&other->protobuf_);
  error_.Swap(&other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockRPCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRPCResponse_descriptor_;
  metadata.reflection = StockRPCResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockRPCResponse

// optional bytes protobuf = 1;
bool StockRPCResponse::has_protobuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockRPCResponse::set_has_protobuf() {
  _has_bits_[0] |= 0x00000001u;
}
void StockRPCResponse::clear_has_protobuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockRPCResponse::clear_protobuf() {
  protobuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protobuf();
}
 const ::std::string& StockRPCResponse::protobuf() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCResponse.protobuf)
  return protobuf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCResponse::set_protobuf(const ::std::string& value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCResponse.protobuf)
}
 void StockRPCResponse::set_protobuf(const char* value) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCResponse.protobuf)
}
 void StockRPCResponse::set_protobuf(const void* value, size_t size) {
  set_has_protobuf();
  protobuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCResponse.protobuf)
}
 ::std::string* StockRPCResponse::mutable_protobuf() {
  set_has_protobuf();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCResponse.protobuf)
  return protobuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockRPCResponse::release_protobuf() {
  clear_has_protobuf();
  return protobuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCResponse::set_allocated_protobuf(::std::string* protobuf) {
  if (protobuf != NULL) {
    set_has_protobuf();
  } else {
    clear_has_protobuf();
  }
  protobuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protobuf);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCResponse.protobuf)
}

// optional string error = 2;
bool StockRPCResponse::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StockRPCResponse::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void StockRPCResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void StockRPCResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
 const ::std::string& StockRPCResponse::error() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCResponse::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCResponse.error)
}
 void StockRPCResponse::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCResponse.error)
}
 void StockRPCResponse::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCResponse.error)
}
 ::std::string* StockRPCResponse::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockRPCResponse::release_error() {
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCResponse.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockRPCAddRequest::kFunc1FieldNumber;
const int StockRPCAddRequest::kFunc2FieldNumber;
#endif  // !_MSC_VER

StockRPCAddRequest::StockRPCAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockRPCAddRequest)
}

void StockRPCAddRequest::InitAsDefaultInstance() {
}

StockRPCAddRequest::StockRPCAddRequest(const StockRPCAddRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockRPCAddRequest)
}

void StockRPCAddRequest::SharedCtor() {
  _cached_size_ = 0;
  func1_ = 0u;
  func2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRPCAddRequest::~StockRPCAddRequest() {
  // @@protoc_insertion_point(destructor:StockMarket.StockRPCAddRequest)
  SharedDtor();
}

void StockRPCAddRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockRPCAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRPCAddRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRPCAddRequest_descriptor_;
}

const StockRPCAddRequest& StockRPCAddRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockRPCAddRequest* StockRPCAddRequest::default_instance_ = NULL;

StockRPCAddRequest* StockRPCAddRequest::New(::google::protobuf::Arena* arena) const {
  StockRPCAddRequest* n = new StockRPCAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockRPCAddRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StockRPCAddRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(func1_, func2_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockRPCAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockRPCAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 func1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &func1_)));
          set_has_func1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_func2;
        break;
      }

      // required uint32 func2 = 2;
      case 2: {
        if (tag == 16) {
         parse_func2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &func2_)));
          set_has_func2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockRPCAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockRPCAddRequest)
  return false;
#undef DO_
}

void StockRPCAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockRPCAddRequest)
  // required uint32 func1 = 1;
  if (has_func1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->func1(), output);
  }

  // required uint32 func2 = 2;
  if (has_func2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->func2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockRPCAddRequest)
}

::google::protobuf::uint8* StockRPCAddRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockRPCAddRequest)
  // required uint32 func1 = 1;
  if (has_func1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->func1(), target);
  }

  // required uint32 func2 = 2;
  if (has_func2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->func2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockRPCAddRequest)
  return target;
}

int StockRPCAddRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_func1()) {
    // required uint32 func1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->func1());
  }

  if (has_func2()) {
    // required uint32 func2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->func2());
  }

  return total_size;
}
int StockRPCAddRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 func1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->func1());

    // required uint32 func2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->func2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRPCAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockRPCAddRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockRPCAddRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRPCAddRequest::MergeFrom(const StockRPCAddRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func1()) {
      set_func1(from.func1());
    }
    if (from.has_func2()) {
      set_func2(from.func2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockRPCAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRPCAddRequest::CopyFrom(const StockRPCAddRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRPCAddRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StockRPCAddRequest::Swap(StockRPCAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockRPCAddRequest::InternalSwap(StockRPCAddRequest* other) {
  std::swap(func1_, other->func1_);
  std::swap(func2_, other->func2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockRPCAddRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRPCAddRequest_descriptor_;
  metadata.reflection = StockRPCAddRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockRPCAddRequest

// required uint32 func1 = 1;
bool StockRPCAddRequest::has_func1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockRPCAddRequest::set_has_func1() {
  _has_bits_[0] |= 0x00000001u;
}
void StockRPCAddRequest::clear_has_func1() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockRPCAddRequest::clear_func1() {
  func1_ = 0u;
  clear_has_func1();
}
 ::google::protobuf::uint32 StockRPCAddRequest::func1() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCAddRequest.func1)
  return func1_;
}
 void StockRPCAddRequest::set_func1(::google::protobuf::uint32 value) {
  set_has_func1();
  func1_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCAddRequest.func1)
}

// required uint32 func2 = 2;
bool StockRPCAddRequest::has_func2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StockRPCAddRequest::set_has_func2() {
  _has_bits_[0] |= 0x00000002u;
}
void StockRPCAddRequest::clear_has_func2() {
  _has_bits_[0] &= ~0x00000002u;
}
void StockRPCAddRequest::clear_func2() {
  func2_ = 0u;
  clear_has_func2();
}
 ::google::protobuf::uint32 StockRPCAddRequest::func2() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCAddRequest.func2)
  return func2_;
}
 void StockRPCAddRequest::set_func2(::google::protobuf::uint32 value) {
  set_has_func2();
  func2_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCAddRequest.func2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockRPCAddResponse::kSumFieldNumber;
#endif  // !_MSC_VER

StockRPCAddResponse::StockRPCAddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockRPCAddResponse)
}

void StockRPCAddResponse::InitAsDefaultInstance() {
}

StockRPCAddResponse::StockRPCAddResponse(const StockRPCAddResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockRPCAddResponse)
}

void StockRPCAddResponse::SharedCtor() {
  _cached_size_ = 0;
  sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRPCAddResponse::~StockRPCAddResponse() {
  // @@protoc_insertion_point(destructor:StockMarket.StockRPCAddResponse)
  SharedDtor();
}

void StockRPCAddResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockRPCAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRPCAddResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRPCAddResponse_descriptor_;
}

const StockRPCAddResponse& StockRPCAddResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockRPCAddResponse* StockRPCAddResponse::default_instance_ = NULL;

StockRPCAddResponse* StockRPCAddResponse::New(::google::protobuf::Arena* arena) const {
  StockRPCAddResponse* n = new StockRPCAddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockRPCAddResponse::Clear() {
  sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockRPCAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockRPCAddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockRPCAddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockRPCAddResponse)
  return false;
#undef DO_
}

void StockRPCAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockRPCAddResponse)
  // required uint32 sum = 1;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockRPCAddResponse)
}

::google::protobuf::uint8* StockRPCAddResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockRPCAddResponse)
  // required uint32 sum = 1;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockRPCAddResponse)
  return target;
}

int StockRPCAddResponse::ByteSize() const {
  int total_size = 0;

  // required uint32 sum = 1;
  if (has_sum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sum());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRPCAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockRPCAddResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockRPCAddResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRPCAddResponse::MergeFrom(const StockRPCAddResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockRPCAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRPCAddResponse::CopyFrom(const StockRPCAddResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRPCAddResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StockRPCAddResponse::Swap(StockRPCAddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockRPCAddResponse::InternalSwap(StockRPCAddResponse* other) {
  std::swap(sum_, other->sum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockRPCAddResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRPCAddResponse_descriptor_;
  metadata.reflection = StockRPCAddResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockRPCAddResponse

// required uint32 sum = 1;
bool StockRPCAddResponse::has_sum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockRPCAddResponse::set_has_sum() {
  _has_bits_[0] |= 0x00000001u;
}
void StockRPCAddResponse::clear_has_sum() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockRPCAddResponse::clear_sum() {
  sum_ = 0u;
  clear_has_sum();
}
 ::google::protobuf::uint32 StockRPCAddResponse::sum() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCAddResponse.sum)
  return sum_;
}
 void StockRPCAddResponse::set_sum(::google::protobuf::uint32 value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCAddResponse.sum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockRPCReverseRequest::kToReverseFieldNumber;
#endif  // !_MSC_VER

StockRPCReverseRequest::StockRPCReverseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockRPCReverseRequest)
}

void StockRPCReverseRequest::InitAsDefaultInstance() {
}

StockRPCReverseRequest::StockRPCReverseRequest(const StockRPCReverseRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockRPCReverseRequest)
}

void StockRPCReverseRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  to_reverse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRPCReverseRequest::~StockRPCReverseRequest() {
  // @@protoc_insertion_point(destructor:StockMarket.StockRPCReverseRequest)
  SharedDtor();
}

void StockRPCReverseRequest::SharedDtor() {
  to_reverse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockRPCReverseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRPCReverseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRPCReverseRequest_descriptor_;
}

const StockRPCReverseRequest& StockRPCReverseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockRPCReverseRequest* StockRPCReverseRequest::default_instance_ = NULL;

StockRPCReverseRequest* StockRPCReverseRequest::New(::google::protobuf::Arena* arena) const {
  StockRPCReverseRequest* n = new StockRPCReverseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockRPCReverseRequest::Clear() {
  if (has_to_reverse()) {
    to_reverse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockRPCReverseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockRPCReverseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string to_reverse = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_reverse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_reverse().data(), this->to_reverse().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockRPCReverseRequest.to_reverse");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockRPCReverseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockRPCReverseRequest)
  return false;
#undef DO_
}

void StockRPCReverseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockRPCReverseRequest)
  // required string to_reverse = 1;
  if (has_to_reverse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_reverse().data(), this->to_reverse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCReverseRequest.to_reverse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->to_reverse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockRPCReverseRequest)
}

::google::protobuf::uint8* StockRPCReverseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockRPCReverseRequest)
  // required string to_reverse = 1;
  if (has_to_reverse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_reverse().data(), this->to_reverse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCReverseRequest.to_reverse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->to_reverse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockRPCReverseRequest)
  return target;
}

int StockRPCReverseRequest::ByteSize() const {
  int total_size = 0;

  // required string to_reverse = 1;
  if (has_to_reverse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_reverse());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRPCReverseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockRPCReverseRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockRPCReverseRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRPCReverseRequest::MergeFrom(const StockRPCReverseRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_reverse()) {
      set_has_to_reverse();
      to_reverse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_reverse_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockRPCReverseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRPCReverseRequest::CopyFrom(const StockRPCReverseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRPCReverseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StockRPCReverseRequest::Swap(StockRPCReverseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockRPCReverseRequest::InternalSwap(StockRPCReverseRequest* other) {
  to_reverse_.Swap(&other->to_reverse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockRPCReverseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRPCReverseRequest_descriptor_;
  metadata.reflection = StockRPCReverseRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockRPCReverseRequest

// required string to_reverse = 1;
bool StockRPCReverseRequest::has_to_reverse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockRPCReverseRequest::set_has_to_reverse() {
  _has_bits_[0] |= 0x00000001u;
}
void StockRPCReverseRequest::clear_has_to_reverse() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockRPCReverseRequest::clear_to_reverse() {
  to_reverse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_reverse();
}
 const ::std::string& StockRPCReverseRequest::to_reverse() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCReverseRequest.to_reverse)
  return to_reverse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCReverseRequest::set_to_reverse(const ::std::string& value) {
  set_has_to_reverse();
  to_reverse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCReverseRequest.to_reverse)
}
 void StockRPCReverseRequest::set_to_reverse(const char* value) {
  set_has_to_reverse();
  to_reverse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCReverseRequest.to_reverse)
}
 void StockRPCReverseRequest::set_to_reverse(const char* value, size_t size) {
  set_has_to_reverse();
  to_reverse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCReverseRequest.to_reverse)
}
 ::std::string* StockRPCReverseRequest::mutable_to_reverse() {
  set_has_to_reverse();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCReverseRequest.to_reverse)
  return to_reverse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockRPCReverseRequest::release_to_reverse() {
  clear_has_to_reverse();
  return to_reverse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCReverseRequest::set_allocated_to_reverse(::std::string* to_reverse) {
  if (to_reverse != NULL) {
    set_has_to_reverse();
  } else {
    clear_has_to_reverse();
  }
  to_reverse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_reverse);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCReverseRequest.to_reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockRPCReverseResponse::kReversedFieldNumber;
#endif  // !_MSC_VER

StockRPCReverseResponse::StockRPCReverseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockRPCReverseResponse)
}

void StockRPCReverseResponse::InitAsDefaultInstance() {
}

StockRPCReverseResponse::StockRPCReverseResponse(const StockRPCReverseResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockRPCReverseResponse)
}

void StockRPCReverseResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reversed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRPCReverseResponse::~StockRPCReverseResponse() {
  // @@protoc_insertion_point(destructor:StockMarket.StockRPCReverseResponse)
  SharedDtor();
}

void StockRPCReverseResponse::SharedDtor() {
  reversed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockRPCReverseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRPCReverseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRPCReverseResponse_descriptor_;
}

const StockRPCReverseResponse& StockRPCReverseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockRPCReverseResponse* StockRPCReverseResponse::default_instance_ = NULL;

StockRPCReverseResponse* StockRPCReverseResponse::New(::google::protobuf::Arena* arena) const {
  StockRPCReverseResponse* n = new StockRPCReverseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockRPCReverseResponse::Clear() {
  if (has_reversed()) {
    reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockRPCReverseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockRPCReverseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reversed = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reversed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reversed().data(), this->reversed().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockRPCReverseResponse.reversed");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockRPCReverseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockRPCReverseResponse)
  return false;
#undef DO_
}

void StockRPCReverseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockRPCReverseResponse)
  // required string reversed = 1;
  if (has_reversed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reversed().data(), this->reversed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCReverseResponse.reversed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reversed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockRPCReverseResponse)
}

::google::protobuf::uint8* StockRPCReverseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockRPCReverseResponse)
  // required string reversed = 1;
  if (has_reversed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reversed().data(), this->reversed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockRPCReverseResponse.reversed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reversed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockRPCReverseResponse)
  return target;
}

int StockRPCReverseResponse::ByteSize() const {
  int total_size = 0;

  // required string reversed = 1;
  if (has_reversed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reversed());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRPCReverseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockRPCReverseResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockRPCReverseResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRPCReverseResponse::MergeFrom(const StockRPCReverseResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reversed()) {
      set_has_reversed();
      reversed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reversed_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockRPCReverseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRPCReverseResponse::CopyFrom(const StockRPCReverseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRPCReverseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StockRPCReverseResponse::Swap(StockRPCReverseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockRPCReverseResponse::InternalSwap(StockRPCReverseResponse* other) {
  reversed_.Swap(&other->reversed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockRPCReverseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRPCReverseResponse_descriptor_;
  metadata.reflection = StockRPCReverseResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockRPCReverseResponse

// required string reversed = 1;
bool StockRPCReverseResponse::has_reversed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockRPCReverseResponse::set_has_reversed() {
  _has_bits_[0] |= 0x00000001u;
}
void StockRPCReverseResponse::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockRPCReverseResponse::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
 const ::std::string& StockRPCReverseResponse::reversed() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockRPCReverseResponse.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCReverseResponse::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockRPCReverseResponse.reversed)
}
 void StockRPCReverseResponse::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockRPCReverseResponse.reversed)
}
 void StockRPCReverseResponse::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockRPCReverseResponse.reversed)
}
 ::std::string* StockRPCReverseResponse::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockRPCReverseResponse.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockRPCReverseResponse::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockRPCReverseResponse::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockRPCReverseResponse.reversed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockWorkerRequest::kStringInFieldNumber;
#endif  // !_MSC_VER

StockWorkerRequest::StockWorkerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockWorkerRequest)
}

void StockWorkerRequest::InitAsDefaultInstance() {
}

StockWorkerRequest::StockWorkerRequest(const StockWorkerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockWorkerRequest)
}

void StockWorkerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  string_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockWorkerRequest::~StockWorkerRequest() {
  // @@protoc_insertion_point(destructor:StockMarket.StockWorkerRequest)
  SharedDtor();
}

void StockWorkerRequest::SharedDtor() {
  string_in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockWorkerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockWorkerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockWorkerRequest_descriptor_;
}

const StockWorkerRequest& StockWorkerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockWorkerRequest* StockWorkerRequest::default_instance_ = NULL;

StockWorkerRequest* StockWorkerRequest::New(::google::protobuf::Arena* arena) const {
  StockWorkerRequest* n = new StockWorkerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockWorkerRequest::Clear() {
  if (has_string_in()) {
    string_in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockWorkerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockWorkerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string string_in = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_in().data(), this->string_in().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockWorkerRequest.string_in");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockWorkerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockWorkerRequest)
  return false;
#undef DO_
}

void StockWorkerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockWorkerRequest)
  // required string string_in = 1;
  if (has_string_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_in().data(), this->string_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockWorkerRequest.string_in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_in(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockWorkerRequest)
}

::google::protobuf::uint8* StockWorkerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockWorkerRequest)
  // required string string_in = 1;
  if (has_string_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_in().data(), this->string_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockWorkerRequest.string_in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_in(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockWorkerRequest)
  return target;
}

int StockWorkerRequest::ByteSize() const {
  int total_size = 0;

  // required string string_in = 1;
  if (has_string_in()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string_in());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockWorkerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockWorkerRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockWorkerRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockWorkerRequest::MergeFrom(const StockWorkerRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_in()) {
      set_has_string_in();
      string_in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_in_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockWorkerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockWorkerRequest::CopyFrom(const StockWorkerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockWorkerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StockWorkerRequest::Swap(StockWorkerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockWorkerRequest::InternalSwap(StockWorkerRequest* other) {
  string_in_.Swap(&other->string_in_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockWorkerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockWorkerRequest_descriptor_;
  metadata.reflection = StockWorkerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockWorkerRequest

// required string string_in = 1;
bool StockWorkerRequest::has_string_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockWorkerRequest::set_has_string_in() {
  _has_bits_[0] |= 0x00000001u;
}
void StockWorkerRequest::clear_has_string_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockWorkerRequest::clear_string_in() {
  string_in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_in();
}
 const ::std::string& StockWorkerRequest::string_in() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockWorkerRequest.string_in)
  return string_in_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockWorkerRequest::set_string_in(const ::std::string& value) {
  set_has_string_in();
  string_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockWorkerRequest.string_in)
}
 void StockWorkerRequest::set_string_in(const char* value) {
  set_has_string_in();
  string_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockWorkerRequest.string_in)
}
 void StockWorkerRequest::set_string_in(const char* value, size_t size) {
  set_has_string_in();
  string_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockWorkerRequest.string_in)
}
 ::std::string* StockWorkerRequest::mutable_string_in() {
  set_has_string_in();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockWorkerRequest.string_in)
  return string_in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockWorkerRequest::release_string_in() {
  clear_has_string_in();
  return string_in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockWorkerRequest::set_allocated_string_in(::std::string* string_in) {
  if (string_in != NULL) {
    set_has_string_in();
  } else {
    clear_has_string_in();
  }
  string_in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_in);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockWorkerRequest.string_in)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StockWorkerResponse::kStringOutFieldNumber;
#endif  // !_MSC_VER

StockWorkerResponse::StockWorkerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockMarket.StockWorkerResponse)
}

void StockWorkerResponse::InitAsDefaultInstance() {
}

StockWorkerResponse::StockWorkerResponse(const StockWorkerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockMarket.StockWorkerResponse)
}

void StockWorkerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  string_out_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockWorkerResponse::~StockWorkerResponse() {
  // @@protoc_insertion_point(destructor:StockMarket.StockWorkerResponse)
  SharedDtor();
}

void StockWorkerResponse::SharedDtor() {
  string_out_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StockWorkerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockWorkerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockWorkerResponse_descriptor_;
}

const StockWorkerResponse& StockWorkerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockmarket_2eproto();
  return *default_instance_;
}

StockWorkerResponse* StockWorkerResponse::default_instance_ = NULL;

StockWorkerResponse* StockWorkerResponse::New(::google::protobuf::Arena* arena) const {
  StockWorkerResponse* n = new StockWorkerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockWorkerResponse::Clear() {
  if (has_string_out()) {
    string_out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockWorkerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockMarket.StockWorkerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string string_out = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_out().data(), this->string_out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StockMarket.StockWorkerResponse.string_out");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockMarket.StockWorkerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockMarket.StockWorkerResponse)
  return false;
#undef DO_
}

void StockWorkerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockMarket.StockWorkerResponse)
  // required string string_out = 1;
  if (has_string_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_out().data(), this->string_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockWorkerResponse.string_out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_out(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockMarket.StockWorkerResponse)
}

::google::protobuf::uint8* StockWorkerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockMarket.StockWorkerResponse)
  // required string string_out = 1;
  if (has_string_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_out().data(), this->string_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StockMarket.StockWorkerResponse.string_out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_out(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockMarket.StockWorkerResponse)
  return target;
}

int StockWorkerResponse::ByteSize() const {
  int total_size = 0;

  // required string string_out = 1;
  if (has_string_out()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string_out());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockWorkerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockWorkerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StockWorkerResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockWorkerResponse::MergeFrom(const StockWorkerResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_out()) {
      set_has_string_out();
      string_out_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_out_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockWorkerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockWorkerResponse::CopyFrom(const StockWorkerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockWorkerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StockWorkerResponse::Swap(StockWorkerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockWorkerResponse::InternalSwap(StockWorkerResponse* other) {
  string_out_.Swap(&other->string_out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockWorkerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockWorkerResponse_descriptor_;
  metadata.reflection = StockWorkerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockWorkerResponse

// required string string_out = 1;
bool StockWorkerResponse::has_string_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockWorkerResponse::set_has_string_out() {
  _has_bits_[0] |= 0x00000001u;
}
void StockWorkerResponse::clear_has_string_out() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockWorkerResponse::clear_string_out() {
  string_out_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_out();
}
 const ::std::string& StockWorkerResponse::string_out() const {
  // @@protoc_insertion_point(field_get:StockMarket.StockWorkerResponse.string_out)
  return string_out_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockWorkerResponse::set_string_out(const ::std::string& value) {
  set_has_string_out();
  string_out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StockMarket.StockWorkerResponse.string_out)
}
 void StockWorkerResponse::set_string_out(const char* value) {
  set_has_string_out();
  string_out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StockMarket.StockWorkerResponse.string_out)
}
 void StockWorkerResponse::set_string_out(const char* value, size_t size) {
  set_has_string_out();
  string_out_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StockMarket.StockWorkerResponse.string_out)
}
 ::std::string* StockWorkerResponse::mutable_string_out() {
  set_has_string_out();
  // @@protoc_insertion_point(field_mutable:StockMarket.StockWorkerResponse.string_out)
  return string_out_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StockWorkerResponse::release_string_out() {
  clear_has_string_out();
  return string_out_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StockWorkerResponse::set_allocated_string_out(::std::string* string_out) {
  if (string_out != NULL) {
    set_has_string_out();
  } else {
    clear_has_string_out();
  }
  string_out_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_out);
  // @@protoc_insertion_point(field_set_allocated:StockMarket.StockWorkerResponse.string_out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace StockMarket

// @@protoc_insertion_point(global_scope)
